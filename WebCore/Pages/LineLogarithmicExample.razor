@page "/LineLogarithmicExample"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.Util
@inject WeatherForecastService ForecastService

<h2>Line Logarithmic Chart</h2>
<ChartJsLineChart @ref="lineChartJs" Config="@lineConfig" Width="600" Height="300" />

@code
{
    LineConfig lineConfig;
    ChartJsLineChart lineChartJs;

    protected override async Task OnInitializedAsync()
    {
        lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            },
                            GridLines = new GridLines
                            {
                                 Display = false
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMin = -2
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>()
                    {
                        new LogarithmicAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temp"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };


        var tempPerHourSet = new LineDataset<Point>()
        {
            BackgroundColor = ColorUtil.ColorString(0, 255, 0, 1.0),
            BorderColor = ColorUtil.ColorString(0, 0, 255, 1.0),
            Label = "Temp (C) per Hour",
            Fill = false,
            PointBackgroundColor = ColorUtil.RandomColorString(),
            BorderWidth = 1,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
        };

        var tempPerDaySet = new LineDataset<Point>()
        {
            BackgroundColor = "#63ff84",
            BorderColor = "#63ff84",
            Label = "Temp (F) per Day",
            Fill = false,
            BorderWidth = 1,
            PointRadius = 2,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
        };

        WeatherForecast[] forecasts = await ForecastService.GetStaticForecastAsync(DateTime.Now, 5);

        IEnumerable<WeatherForecast> onlyDays = forecasts.GroupBy(f => f.Date.Day).Select(g => g.First());

        var weatherForecasts = onlyDays.ToList();
        tempPerHourSet.AddRange(weatherForecasts.Select(p => new Point(p.Date.Hour, p.TemperatureC)));
        tempPerDaySet.AddRange(weatherForecasts.Select(p => new Point(p.Date.Day, p.TemperatureF)));

        lineConfig.Data.Datasets.Add(tempPerHourSet);
        lineConfig.Data.Datasets.Add(tempPerDaySet);
    }
}
