@page "/LineTimeExample"
@using WebCore.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Axes
@using ChartJs.Blazor.ChartJS.LineChart.Axes.Ticks
@inject WeatherForecastService ForecastService
@inject IJSRuntime jsRuntime

<h2>Line Time Chart</h2>
<ChartJsLineChart @ref="lineChartJs" @ref:suppressField Config="@lineChartConfig" Width="600" Height="300" />

@code
{
    LineChartConfig lineChartConfig;
    ChartJsLineChart lineChartJs;
    const string de_ch = "de-ch";
    private bool localeChangeWasAttempted = false;

    private async Task TryChangeLocale()
    {
        if (localeChangeWasAttempted) return;
        localeChangeWasAttempted = true;

        var locales = await jsRuntime.GetAvailableLocales();
        bool localeChanged = false;
        if (locales != null && locales.Contains(de_ch))
        {
            localeChanged = await jsRuntime.ChangeLocale(de_ch);
        }

        if(!localeChanged) Console.WriteLine($"Locale was not changed to {de_ch}. Either it already is {de_ch} or this locale doesn't exist.");
    }

    protected override async Task OnInitializedAsync()
    {
        lineChartConfig = new LineChartConfig
        {
            CanvasId = "timeChartExample",
            Options = new LineChartOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                        }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        var forecasts = await ForecastService.GetForecastAsync(DateTime.Now, 2);

        var tempDataSet = new LineChartDataset<TimeTupel<int>>
        {
            BackgroundColor = "#ff6384",
            BorderColor = "#ff6384",
            Label = "Temperatur in C°",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        tempDataSet.AddRange(forecasts.Select(p => new TimeTupel<int>(new Moment(p.Date), p.TemperatureC)));
        lineChartConfig.Data.Datasets.Add(tempDataSet);
    }

    protected override async Task OnAfterRenderAsync()
    {
        await TryChangeLocale();
    }
}
